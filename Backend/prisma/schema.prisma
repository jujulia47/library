// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Book {
  id         String            @id @default(uuid())
  image      String?
  title      String            @unique()
  serie      Serie?            @relation(fields: [seriesId], references: [id])
  seriesId   String?
  author     String?
  category   String?
  language   String?
  library    Boolean?          @default(false)
  initDate   String?
  finishDate String?
  status     Status?           @relation(fields: [statusId], references: [id])
  statusId   String?
  rating     String?
  comments   String?
  pages      Int?
  version    Version?          @relation(fields: [versionId], references: [id])
  versionId  String?
  flags      FlagsArray[]
  quotes     QuotesArray[]
  collection CollectionArray[]
  created_at DateTime

  @@map("books")
}

model Serie {
  id         String       @id @default(uuid())
  serieName  String?      @unique()
  author     String?
  rating     String?
  status     Status?      @relation(fields: [statusId], references: [id])
  statusId   String?
  initDate   String?
  finishDate String?
  comments   String?
  books      Book[]
  wishlist   Wishlist[]
  flags      FlagsArray[]
  created_at DateTime

  @@map("series")
}

model Version {
  id          String   @id @default(uuid())
  bookVersion String?  @unique()
  books       Book[]
  created_at  DateTime

  @@map("version")
}

model Status {
  id         String   @id @default(uuid())
  bookStatus String?  @unique()
  books      Book[]
  serie      Serie[]
  created_at DateTime

  @@map("status")
}

model QuotesArray {
  id         String   @id @default(uuid())
  quote      String?  @unique()
  quoteId    String?
  page       Int?
  book       Book?    @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  created_at DateTime

  @@map("quotes")
}

model FlagsArray {
  id         String   @id @default(uuid())
  flag       String?  @unique()
  books      Book[]
  serie      Serie[]
  created_at DateTime

  @@map("flags")
}

model CollectionArray {
  id             String     @id @default(uuid())
  collectionName String?    @unique()
  initDate       String?
  finishDate     String?
  comments       String?
  books          Book[]
  wishlist       Wishlist[]
  created_at     DateTime

  @@map("collections")
}

model Wishlist {
  id         String            @id @default(uuid())
  bookTitle  String            @unique()
  bookImage  String?
  link       String?
  serie      Serie?            @relation(fields: [seriesId], references: [id])
  seriesId   String?
  collection CollectionArray[]
  created_at DateTime

  @@map("wishlist")
}
